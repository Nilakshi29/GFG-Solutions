QUESTION:
[LINK: https://www.geeksforgeeks.org/problems/longest-valid-parentheses5657/1]

Given a string str consisting of opening and closing parenthesis '(' and ')'. Find length of the longest valid parenthesis substring.
A parenthesis string is valid if:
1. For every opening parenthesis, there is a closing parenthesis.
2. Opening parenthesis must be closed in the correct order.

Examples :
Input: str = ((()
Output: 2
Explaination: The longest valid parenthesis substring is "()".
Input: str = )()())
Output: 4
Explaination: The longest valid parenthesis substring is "()()".

Expected Time Complexity: O(|str|)
Expected Auxiliary Space: O(|str|)

Constraints:
1 ≤ |str| ≤ 105

SOLUTION : JAVA
<class Solution{
    static int maxLength(String s){
        int max_len=0;
        Stack<Integer> list = new Stack<>();
        //to handle edge cases
        list.push(-1);
        
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i)=='('){
                list.push(i);
            }
            else{
                list.pop();
                if(list.isEmpty()){
                    list.push(i);
                }
                else{
                    max_len= Math.max(max_len, i-list.peek());
                }
            }
        }
        return max_len;
    }
}>
